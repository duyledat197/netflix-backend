// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: question.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateQuestionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateQuestionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Question

	// no validation rules for CategoryId

	return nil
}

// CreateQuestionRequestValidationError is the validation error returned by
// CreateQuestionRequest.Validate if the designated constraints aren't met.
type CreateQuestionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionRequestValidationError) ErrorName() string {
	return "CreateQuestionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionRequestValidationError{}

// Validate checks the field values on CreateQuestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateQuestionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Question

	// no validation rules for CategoryId

	// no validation rules for Success

	return nil
}

// CreateQuestionResponseValidationError is the validation error returned by
// CreateQuestionResponse.Validate if the designated constraints aren't met.
type CreateQuestionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionResponseValidationError) ErrorName() string {
	return "CreateQuestionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionResponseValidationError{}

// Validate checks the field values on GetQuestionDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetQuestionDetailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for QuestionId

	return nil
}

// GetQuestionDetailRequestValidationError is the validation error returned by
// GetQuestionDetailRequest.Validate if the designated constraints aren't met.
type GetQuestionDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionDetailRequestValidationError) ErrorName() string {
	return "GetQuestionDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionDetailRequestValidationError{}

// Validate checks the field values on GetQuestionDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetQuestionDetailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQuestionDetailResponseValidationError{
				field:  "Question",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionDetailResponseValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Success

	return nil
}

// GetQuestionDetailResponseValidationError is the validation error returned by
// GetQuestionDetailResponse.Validate if the designated constraints aren't met.
type GetQuestionDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionDetailResponseValidationError) ErrorName() string {
	return "GetQuestionDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionDetailResponseValidationError{}

// Validate checks the field values on CreateAnswerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAnswerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for QuestionId

	// no validation rules for Answer

	return nil
}

// CreateAnswerRequestValidationError is the validation error returned by
// CreateAnswerRequest.Validate if the designated constraints aren't met.
type CreateAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnswerRequestValidationError) ErrorName() string {
	return "CreateAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnswerRequestValidationError{}

// Validate checks the field values on CreateAnswerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAnswerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// CreateAnswerResponseValidationError is the validation error returned by
// CreateAnswerResponse.Validate if the designated constraints aren't met.
type CreateAnswerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnswerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnswerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnswerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnswerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnswerResponseValidationError) ErrorName() string {
	return "CreateAnswerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnswerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnswerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnswerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnswerResponseValidationError{}
